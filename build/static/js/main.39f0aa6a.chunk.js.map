{"version":3,"sources":["API.js","Poster.js","request.js","Posters.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["API","axios","create","baseURL","Poster","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","response","data","results","getMovies","className","map","item","key","id","onClick","movie","console","log","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","message","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOrginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Posters","style","padding","backgroundColor","Banner","str","n","setMovie","Math","floor","random","length","getMovie","backgroundSize","backgroundPosition","backgroundImage","original_name","overview","substring","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39f0aa6a.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst API = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport default API;\n","import React, { useState, useEffect } from 'react';\nimport './poster.css';\nimport API from './API';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\nconst baseUrl = 'https://image.tmdb.org/t/p/original';\n\nfunction Poster({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n\n  useEffect(() => {\n    async function getMovies() {\n      const response = await API.get(fetchUrl);\n      setMovies(response.data.results);\n    }\n    getMovies();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  const handleClick = (movie) => {\n    console.log(movie);\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer(movie?.name || '')\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get('v'));\n        })\n        .catch((error) => {\n          console.log(error.message);\n        });\n    }\n  };\n\n  return (\n    <div className='poster'>\n      <h2>{title}</h2>\n      <div className='poster__postbody'>\n        {movies.map((item) => {\n          return (\n            <img\n              key={item.id}\n              onClick={() => handleClick(item)}\n              src={`${baseUrl}${\n                isLargeRow ? item.poster_path : item.backdrop_path\n              }`}\n              alt={item.name}\n              className={`poster_image ${isLargeRow && 'poster_largerimage'}`}\n            />\n          );\n        })}\n      </div>\n\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Poster;\n","const API_KEY = '188327a951832b32c6a947af858de9da';\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOrginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React from 'react';\nimport Poster from './Poster';\nimport requests from './request';\n\nfunction Posters() {\n  return (\n    <div\n      style={{\n        padding: '1rem 1rem',\n        backgroundColor: '#111',\n      }}\n    >\n      <Poster\n        title='NETFLIX ORIGINALS'\n        fetchUrl={requests.fetchNetflixOrginals}\n        isLargeRow\n      />\n      <Poster title='Trending Now' fetchUrl={requests.fetchTrending} />\n      <Poster title='Top Rated' fetchUrl={requests.fetchTopRated} />\n      <Poster title='Action Movies' fetchUrl={requests.fetchActionMovies} />\n      <Poster title='Comedy Movies' fetchUrl={requests.fetchComedyMovies} />\n      <Poster title='Horror Movies' fetchUrl={requests.fetchHorrorMovies} />\n      <Poster title='Romance Movies' fetchUrl={requests.fetchRomanceMovies} />\n      <Poster title='Documentaries' fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default Posters;\n","import React, { useState, useEffect } from 'react';\nimport API from './API';\nimport requests from './request';\nimport './banner.css';\n\nconst baseUrl = 'https://image.tmdb.org/t/p/original/';\n\nfunction Banner() {\n  const [movie, setMovie] = useState({});\n\n  useEffect(() => {\n    async function getMovie() {\n      const response = await API.get(requests.fetchNetflixOrginals);\n      let movies = response.data.results;\n      setMovie(movies[Math.floor(Math.random() * movies.length - 1)]);\n    }\n    getMovie();\n  }, []);\n\n  const truncate = (str, n) => {\n    return str?.length > n ? str.substring(0, n - 1) + '...' : str;\n  };\n\n  console.log(movie);\n  return (\n    <header\n      className='banner'\n      style={{\n        backgroundSize: 'cover',\n        backgroundPosition: 'center center',\n        backgroundImage: `url(${baseUrl}${movie.backdrop_path})`,\n      }}\n    >\n      <div className='banner__body'>\n        <div className='banner_title'>\n          {movie?.name || movie?.title || movie?.original_name}\n        </div>\n        <div className='banner__buttongroup'>\n          <button className='banner__btn'>Play</button>\n          <button className='banner__btn'>My list</button>\n        </div>\n        <div className='banner__desc'>{truncate(movie.overview, 250)}</div>\n      </div>\n      <div className='banner__fadebottom'></div>\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useEffect, useState } from 'react';\nimport './Nav.css';\n\nfunction Nav() {\n  const [show, handleShow] = useState();\n  useEffect(() => {\n    window.addEventListener('scroll', () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else {\n        handleShow(false);\n      }\n    });\n\n    return () => {\n      window.removeEventListener('scroll');\n    };\n  }, []);\n\n  return (\n    <div className={`nav ${show && 'nav__black'}`}>\n      <img\n        className='nav__logo'\n        src='https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png'\n        alt='logo'\n      />\n\n      <img\n        className='nav_avatar'\n        src='https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png'\n        alt=''\n      />\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport './App.css';\nimport Posters from './Posters';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Nav />\n      <Banner />\n      <Posters />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}